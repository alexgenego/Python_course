# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов 
# второго множества. Затем пользователь вводит сами элементы множеств.

import random
a = int(input("Введите границу 1-го множества: "))
n1 = int(input("Введите нижний размер множества: "))
m1 = int(input("Введите верхний размер множества: "))
list1 = [random.randint(0, a) for i in range(random.randint(n1, m1))]
print(list1)
b = int(input("Введите границу 2-го множества: "))
n2 = int(input("Введите нижний размер множества: "))
m2 = int(input("Введите верхний размер множества: "))
list2 = [random.randint(0, b) for i in range(random.randint(n2, m2))]
print(list2)
list1 = set(list1)
list2 = set(list2)
print(set.intersection(list1,  list2))


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт 
# на круглой грядке, причём кусты высажены только по окружности. Таким образом, 
# у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло 
# различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать 
# за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.
    """
    Условие задачи некорректно. От номера грядки ничего не зависит. Есть зависимость от номера куста
    на каждой грядке. Принимаем за условие номер куста и возможность смещения модуля (1 куст - 1 шаг)
    на оптимальную позицию. По условию - максимальный урожай на 3-х последних кустах (ai, где ш - номер куста).
    """
N = int(input("Введите количество кустов "))
i = int(input("Введите номер куста "))
if N - i > 1:
    print(f'сместиться на {N-i-1} куста в сторону увеличения номеров')
elif N - i == 1:
    print("собираем урожай с этого куста и соседних справа и слева")
else: print ("шаг назад")


"""
    Меняем условие. Принимаем, что номер куста i случайно распределен в ряду кустов на грядке, и комбайн имеет 
    возможность смещения (1 куст - 1 шаг) на оптимальную позицию. Комбайн идет к последнему кусту.
    Тогда - найти максимум от суммы трех идущих подряд значений числа ягод, определить позицию).
"""
import random
N = int(input("Введите количество кустов: "))
numbers = list(range(1, N+1))
print(numbers)
NewBush = list(numbers)
random.shuffle(NewBush)
print(NewBush)
SumBush = []
for i in range(len(NewBush)):
    if i < N-1:
        SumBush.append(NewBush[i-1] + NewBush[i] + NewBush[i+1])
    else: SumBush.append(NewBush[i-1] + NewBush[i] + NewBush[1])
print(SumBush)
max_harvest = max(SumBush)
ind = SumBush.index(max_harvest)
print(ind)
if N - ind > 1:
    print(f'сместиться на {N-ind-1} куста в сторону увеличения номеров')
elif N - ind == 1:
    print("собираем урожай с этого куста и соседних справа и слева")
else: print ("шаг назад")